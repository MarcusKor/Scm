# CMakeList.txt : 최상위 CMake 프로젝트 파일, 전역 구성을 수행하고
# 여기에 하위 프로젝트를 포함합니다.
#
cmake_minimum_required (VERSION 3.8)

# 지원되는 경우 MSVC 컴파일러에 대해 핫 다시 로드 사용하도록 설정합니다.
if (POLICY CMP0141)
    cmake_policy (SET CMP0141 NEW)
    set (CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif ()

project (Scmm)

# if (MSVC)
#     # warning level 4
#     add_compile_options (/W4)
# else ()
#     # additional warnings
#     add_compile_options (-Wall -Wextra -Wpedantic -Wvolatile)
# endif ()

if (NOT WIN32)
    if (CMAKE_SIZEOF_VOID_P GREATER 4)
        message (STATUS "[ Setting ${CMAKE_CXX_COMPILE_OPTIONS_PIC} for machine ${CMAKE_HOST_SYSTEM_PROCESSOR} ]")
        set (CMAKE_POSITION_INDEPENDENT_CODE 1)
        set (ARCH_ADDRESS_BITS_X64 TRUE)
        message (STATUS "[ Architecture address 64 bits ]")
    else ()
        set (ARCH_ADDRESS_BITS_X64 false)
        message (STATUS "[ Architecture address 32 bits ]")
    endif ()
else ()
    set (CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    message (STATUS "[ CMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} ]")
    if (CMAKE_SIZEOF_VOID_P GREATER 4)
        set (ARCH_ADDRESS_BITS_X64 TRUE)
        message (STATUS "[ Architecture address 64 bits ]")
    else ()
        set (ARCH_ADDRESS_BITS_X64 false)
        message (STATUS "[ Architecture address 32 bits ]")
    endif ()
endif ()

if (WIN32 AND NOT CYGWIN AND NOT MSYS AND NOT CMAKE_CROSSCOMPILING)
    set (PACKAGE_FIND_STYLE "win32")
else ()
    set (PACKAGE_FIND_STYLE "unix")
endif ()

add_definitions("-DBOOST_ALLOW_DEPRECATED_HEADERS")
add_definitions("-DBOOST_BIND_GLOBAL_PLACEHOLDERS")

if ("${CURRENT_PACKAGES_DIR}" STREQUAL "")
    if (WIN32)
        message (STATUS "[ Find vcpkg installation information ]")
        if ("${VCPKG_INSTALLED_DIR}" STREQUAL "")
            if ("$ENV{VCPKG_ROOT}" STREQUAL "")
                set (vs_vcpkg_path "C:/Program Files/Microsoft Visual Studio/2022/Preview/VC/vcpkg/installed")
                set (respository_vcpkg_path "C:/Repository/vcpkg/installed")
                if (EXISTS vs_vcpkg_path)
                    set (VCPKG_INSTALLED_DIR vs_vcpkg_path) 
                elseif (EXISTS respository_vcpkg_path)
                    set (VCPKG_INSTALLED_DIR respository_vcpkg_path) 
                endif ()
            else ()
                message (STATUS "[ VCPKG_ROOT=$ENV{VCPKG_ROOT} ]")
                set (VCPKG_INSTALLED_DIR $ENV{VCPKG_ROOT}/installed)     
                string (REPLACE "\\" "/" VCPKG_INSTALLED_DIR "${VCPKG_INSTALLED_DIR}")
                message (STATUS "[ VCPKG_INSTALLED_DIR=${VCPKG_INSTALLED_DIR} ]")                
            endif ()
            set (VCPKG_INCLUDE_DIR $ENV{VCPKG_INSTALLED_DIR}/$ENV{VCPKG_DEFAULT_TRIPLET}/include)
            set (VCPKG_LIB_DIR $ENV{VCPKG_INSTALLED_DIR}/$ENV{VCPKG_DEFAULT_TRIPLET}/lib)
            set (VCPKG_BIN_DIR $ENV{VCPKG_INSTALLED_DIR}/$ENV{VCPKG_DEFAULT_TRIPLET}/bin)
            set (VCPKG_TOOLS_DIR $ENV{VCPKG_INSTALLED_DIR}/$ENV{VCPKG_DEFAULT_TRIPLET}/tools)     
            string (REPLACE "\\" "/" VCPKG_INCLUDE_DIR "${VCPKG_INCLUDE_DIR}")
            string (REPLACE "\\" "/" VCPKG_LIB_DIR "${VCPKG_LIB_DIR}")
            string (REPLACE "\\" "/" VCPKG_BIN_DIR "${VCPKG_BIN_DIR}")
            string (REPLACE "\\" "/" VCPKG_TOOLS_DIR "${VCPKG_TOOLS_DIR}")
            message (STATUS "[ VCPKG_INCLUDE_DIR=${VCPKG_INCLUDE_DIR} ]")
            message (STATUS "[ VCPKG_LIB_DIR=${VCPKG_LIB_DIR} ]")
            message (STATUS "[ VCPKG_BIN_DIR=${VCPKG_BIN_DIR} ]")
            message (STATUS "[ VCPKG_TOOLS_DIR=${VCPKG_TOOLS_DIR} ]")
        endif ()
        if ("${VCPKG_INSTALLED_DIR}" STREQUAL "")
            message (STATUS "[ Please, install vcpkg to manage c++ packages. The default location of VCPKG_ROOT is ${vc_vcpkg_path} ]")    
        else ()
            if ("${VCPKG_DEFAULT_HOST_TRIPLET}" STREQUAL "")
                if (ARCH_ADDRESS_BITS_X64)
                    set (VCPKG_DEFAULT_HOST_TRIPLET "x64-windows")
                else ()
                    set (VCPKG_DEFAULT_HOST_TRIPLET "x86-windows")
                endif ()
            endif ()
            set (CURRENT_PACKAGES_DIR ${VCPKG_INSTALLED_DIR}/${VCPKG_DEFAULT_HOST_TRIPLET})
            set (PACKAGE_DIR_EXISTS TRUE)
            set (VCPKG_TOOLCHAIN TRUE)
        endif ()
    else (LINUX)
        set (LINUX_INCLUDE_DIR "/usr/include")
        set (LINUX_BINARY_DIR "/usr/bin")
        if (ARCH_ADDRESS_BITS_X64)
            set (LINUX_LIBRARY_DIR "/usr/lib64")
        else ()
            set (LINUX_LIBRARY_DIR "/usr/lib")
        endif ()
        file (READ "/etc/issue" ETC_ISSUE)
        string (REGEX MATCH "Ubuntu|Red Hat|Debian" DIST ${ETC_ISSUE})    
        if (DIST STREQUAL "Debian")        
            message (STATUS "[ Found Debian ]")
        elseif (DIST STREQUAL "Ubuntu")
            message (STATUS "[ Found Ubuntu ]")   
            if (ARCH_ADDRESS_BITS_X64)
                set (LINUX_LIBRARY_DIR "/usr/lib/x86_64-linux-gnu")    
            else ()
                set (LINUX_LIBRARY_DIR "/usr/lib/i386-linux-gnu")    
            endif ()
        else ()
            file (READ "/etc/system-release" ETC_ISSUE)
            string (REGEX MATCH "Ubuntu|Red Hat|Debian" DIST ${ETC_ISSUE})
            if (DIST STREQUAL "Red Hat")
                message (STATUS "[ Found Red Hat ]")
            endif ()
        endif ()
        message (STATUS "[ LINUX_INCLUDE_DIR=${LINUX_INCLUDE_DIR} ]")    
        message (STATUS "[ LINUX_LIBRARY_DIR=${LINUX_LIBRARY_DIR} ]")    
        set (PACKAGE_DIR_EXISTS TRUE)
    endif ()
endif ()

if ("${CMAKE_MODULE_PATH}" STREQUAL "")
    set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
endif ()
    
if (${PACKAGE_DIR_EXISTS})
    set (PROJECT_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
    set (PROJECT_LIBRARY_DIR_DEBUG ${PROJECT_SOURCE_DIR}/lib/debug)
    set (PROJECT_LIBRARY_DIR_RELEASE ${PROJECT_SOURCE_DIR}/lib/release)
    set (PROJECT_BINARY_DIR_DEBUG ${PROJECT_BINARY_DIR}/debug)
    set (PROJECT_BINARY_DIR_RELEASE ${PROJECT_BINARY_DIR}/release)
    message (STATUS "[ PROJECT_INCLUDE_DIR=${PROJECT_INCLUDE_DIR} ]")    
    message (STATUS "[ PROJECT_LIBRARY_DIR_DEBUG=${PROJECT_LIBRARY_DIR_DEBUG} ]")    
    message (STATUS "[ PROJECT_LIBRARY_DIR_RELEASE=${PROJECT_LIBRARY_DIR_RELEASE} ]")    
    message (STATUS "[ PROJECT_BINARY_DIR_DEBUG=${PROJECT_BINARY_DIR_DEBUG} ]")    
    message (STATUS "[ PROJECT_BINARY_DIR_RELEASE=${PROJECT_BINARY_DIR_RELEASE} ]")    
    message (STATUS "[ CURRENT_PACKAGES_DIR=${CURRENT_PACKAGES_DIR} ]")  

    include_directories (${PROJECT_INCLUDE_DIR})
    if (WIN32)
        set (BOOST_ROOT ${CURRENT_PACKAGES_DIR})
        set (BOOST_INCLUDEDIR ${CURRENT_PACKAGES_DIR}/include)
        set (BOOST_LIBRARYDIR ${CURRENT_PACKAGES_DIR}/lib)
        set (BOOST_BINARY_DIR ${CURRENT_PACKAGES_DIR}/bin)
    else ()
        set (BOOST_INCLUDEDIR ${LINUX_INCLUDE_DIR})
        set (BOOST_LIBRARYDIR ${LINUX_LIBRARY_DIR})
    endif ()
    set (Boost_USE_STATIC_LIBS OFF) 
    set (Boost_USE_MULTITHREADED ON)  
    set (Boost_USE_STATIC_RUNTIME OFF) 
    set (CMAKE_VERBOSE_MAKEFILE ON)    
    set (Boost_NO_WARN_NEW_VERSIONS 1)
    message (STATUS "[ Find boost package installation information ]")    
    find_package (Boost REQUIRED COMPONENTS chrono atomic thread system)
    if (${BOOST_FOUND})
        message (STATUS "[ Found boost libraries (version=${Boost_LIB_VERSION}) ]")    
        message (STATUS "[ Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS}]")    
        message (STATUS "[ Boost_LIBRARY_DIRS=${Boost_LIBRARY_DIRS}]")
        message (STATUS "[ Boost_LIBRARIES=${Boost_LIBRARIES}]")
        message (STATUS "[ Boost_LIBRARY_DIR_RELEASE=${Boost_LIBRARY_DIR_RELEASE}]")
        message (STATUS "[ Boost_LIBRARY_DIR_DEBUG=${Boost_LIBRARY_DIR_DEBUG}]")
        message (STATUS "[ BOOST_BINARY_DIR=${BOOST_BINARY_DIR}]")
        include_directories (${Boost_INCLUDE_DIRS})
    endif ()
    message (STATUS "[ Find FlatBuffers package installation information ]")
    message (STATUS "[ CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR} ]")    
    message (STATUS "[ CMAKE_MODULE_PATH=${CMAKE_MODULE_PATH} ]")    
    message (STATUS "[ CMAKE_CURRENT_LIST_DIR=${CMAKE_CURRENT_LIST_DIR} ]")    
    if (WIN32)
        if ("${FLATBUFFERS_INCLUDE_DIR}" STREQUAL "")
            set (FLATBUFFERS_INCLUDE_DIR ${VCPKG_INCLUDE_DIR}/flatbuffers)
        endif ()
        message (STATUS "[ FLATBUFFERS_INCLUDE_DIR=${FLATBUFFERS_INCLUDE_DIR} ]")        
        if ("${FLATBUFFERS_FLATC_EXECUTABLE}" STREQUAL "")
            set (FLATBUFFERS_FLATC_EXECUTABLE ${VCPKG_TOOLS_DIR}/flatbuffers/flatc.exe)        
        endif ()
        message (STATUS "[ FLATBUFFERS_FLATC_EXECUTABLE=${FLATBUFFERS_FLATC_EXECUTABLE} ]")        
        find_package (FlatBuffers REQUIRED PATHS ${VCPKG_INSTALLED_DIR}/$ENV{VCPKG_DEFAULT_TRIPLET})
    elseif (LINUX)
        if ("${FLATBUFFERS_INCLUDE_DIR}" STREQUAL "")
            set (FLATBUFFERS_INCLUDE_DIR ${LINUX_INCLUDE_DIR}/flatbuffers)
        endif ()
        message (STATUS "[ FLATBUFFERS_INCLUDE_DIR=${FLATBUFFERS_INCLUDE_DIR} ]")        
        if ("${FLATBUFFERS_FLATC_EXECUTABLE}" STREQUAL "")
            set (FLATBUFFERS_FLATC_EXECUTABLE ${LINUX_BINARY_DIR}/flatc)        
        endif ()
        message (STATUS "[ FLATBUFFERS_FLATC_EXECUTABLE=${FLATBUFFERS_FLATC_EXECUTABLE} ]") 
        find_package(Flatbuffers REQUIRED PATHS ${FLATBUFFERS_INCLUDE_DIR})
    endif ()
endif ()

# 하위 프로젝트를 포함합니다.
add_subdirectory (src)
